{"version":3,"sources":["components/Cards.module.css","components/Cards.jsx","components/Api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cards","props","data","confirmed","className","styles","container","Grid","spacing","justify","item","component","Card","cx","card","CardContent","Typography","color","variant","gutterBottom","align","start","end","duration","separator","active","recovered","death","deaths","fectchData","a","axios","get","modifiedData","statewise","App","state","fetechedData","this","setState","style","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.375f370d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__28Uxu\",\"card\":\"Cards_card__3Q5zX\",\"active\":\"Cards_active__1mtbH\",\"confirmed\":\"Cards_confirmed__2EjT5\",\"recovered\":\"Cards_recovered__2nISX\",\"death\":\"Cards_death__33T4q\"};","import React from 'react';\r\nimport {Card, CardContent ,Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\nconst Cards = (props) =>{\r\n    if(!props.data.confirmed){\r\n        return 'Loading..!'\r\n    }\r\n    return(\r\n    <div className={styles.container}>\r\n    <br></br>\r\n    <br></br>\r\n    <br></br>\r\n    <Grid container spacing={3} justify=\"center\">\r\n    <Grid item component={Card} className={cx(styles.card,styles.confirmed)} justify=\"center\">\r\n    <CardContent>\r\n    <Typography color=\"body1\" variant=\"h5\" gutterBottom justify=\"center\">CONFIRMED</Typography>\r\n    <Typography color=\"body1\" variant=\"h6\" align=\"center\">  \r\n    <CountUp\r\n    start={0}\r\n    end={props.data.confirmed}\r\n    duration={2.5}\r\n    separator=\",\"/>\r\n    </Typography>\r\n    </CardContent>\r\n    </Grid>\r\n    <Grid item component={Card} className={cx(styles.card,styles.active)} >\r\n    <CardContent>\r\n    <Typography color=\"body1\" variant=\"h5\" gutterBottom justify=\"center\">ACTIVE</Typography>\r\n    <Typography color=\"body1\" variant=\"h6\" align=\"center\">  \r\n    <CountUp\r\n    start={0}\r\n    end={props.data.active}\r\n    duration={2.5}\r\n    separator=\",\"/>\r\n    </Typography>\r\n    </CardContent>\r\n    </Grid>\r\n    <Grid item component={Card} className={cx(styles.card,styles.recovered)}>\r\n    <CardContent>\r\n    <Typography color=\"body1\" variant=\"h5\" gutterBottom justify=\"center\">RECOVERED</Typography>\r\n    <Typography color=\"body1\" variant=\"h6\" align=\"center\">  \r\n    <CountUp\r\n    start={0}\r\n    end={props.data.recovered}\r\n    duration={2.5}\r\n    separator=\",\"/>\r\n    </Typography>\r\n    </CardContent>\r\n    </Grid>\r\n    <Grid item component={Card} className={cx(styles.card,styles.death)}>\r\n    <CardContent>\r\n    <Typography color=\"body1\" variant=\"h5\" gutterBottom justify=\"center\">DEATHS</Typography>\r\n    <Typography color=\"body1\" variant=\"h6\" align=\"center\">  \r\n    <CountUp\r\n    start={0}\r\n    end={props.data.deaths}\r\n    duration={2.5}\r\n    separator=\",\"/>\r\n    </Typography>\r\n    </CardContent>\r\n    </Grid>\r\n    </Grid>\r\n    <br></br>\r\n    <br></br>\r\n    <br></br>\r\n    <br></br>\r\n    <br></br>\r\n    <br></br>\r\n    <br></br>\r\n    <br></br>\r\n    </div>\r\n    )\r\n}\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = \"https://api.covid19india.org/data.json\";\r\n\r\nexport const fectchData = async () =>{\r\n    try {\r\n        const {data} = await axios.get(url);\r\n        const modifiedData={\r\n            confirmed:data.statewise[0].confirmed,\r\n            active:data.statewise[0].active,\r\n            recovered:data.statewise[0].recovered,\r\n            deaths:data.statewise[0].deaths,\r\n            \r\n        }\r\n        return modifiedData ;\r\n    } catch (error) {\r\n        \r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Cards from './components/Cards';\n//import styles from './App.module.css';\nimport {fectchData} from './components/Api';\n\nclass App extends React.Component {\n    state={\n      data:{},\n    }\n\n  async componentDidMount(){\n    const fetechedData = await fectchData();\n    this.setState({data : fetechedData});\n  }\n  render(){\n  return (\n   <div className=\"container\">\n   <br></br>\n   <br></br>\n   <br></br>\n   <br></br>\n   <br></br>\n   <br></br>\n   <br></br>\n      <h1 style={{ color: 'white' }} align=\"center\">COVID-19 Cases in INDIA</h1>\n      <Cards data={this.state.data}/>\n      <br></br>\n   \n      <h5 style={{ color: 'white' }} align=\"center\">Source : www.covid19india.org</h5>\n      <br></br>\n      <br></br><br></br>\n      <br></br><br></br>\n      <br></br>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}